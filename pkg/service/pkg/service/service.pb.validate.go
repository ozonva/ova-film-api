// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: service.proto

package service

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on Movie with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Movie) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for Name

	// no validation rules for Year

	return nil
}

// MovieValidationError is the validation error returned by Movie.Validate if
// the designated constraints aren't met.
type MovieValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MovieValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MovieValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MovieValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MovieValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MovieValidationError) ErrorName() string { return "MovieValidationError" }

// Error satisfies the builtin error interface
func (e MovieValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMovie.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MovieValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MovieValidationError{}

// Validate checks the field values on DescribeMovieMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeMovieMessage) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MovieId

	return nil
}

// DescribeMovieMessageValidationError is the validation error returned by
// DescribeMovieMessage.Validate if the designated constraints aren't met.
type DescribeMovieMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeMovieMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeMovieMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeMovieMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeMovieMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeMovieMessageValidationError) ErrorName() string {
	return "DescribeMovieMessageValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeMovieMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeMovieMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeMovieMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeMovieMessageValidationError{}

// Validate checks the field values on RemoveMovieMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveMovieMessage) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MovieId

	return nil
}

// RemoveMovieMessageValidationError is the validation error returned by
// RemoveMovieMessage.Validate if the designated constraints aren't met.
type RemoveMovieMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveMovieMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveMovieMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveMovieMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveMovieMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveMovieMessageValidationError) ErrorName() string {
	return "RemoveMovieMessageValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveMovieMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveMovieMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveMovieMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveMovieMessageValidationError{}

// Validate checks the field values on MovieList with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *MovieList) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetMovies() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MovieListValidationError{
					field:  fmt.Sprintf("Movies[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MovieListValidationError is the validation error returned by
// MovieList.Validate if the designated constraints aren't met.
type MovieListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MovieListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MovieListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MovieListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MovieListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MovieListValidationError) ErrorName() string { return "MovieListValidationError" }

// Error satisfies the builtin error interface
func (e MovieListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMovieList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MovieListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MovieListValidationError{}

// Validate checks the field values on MovieListRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *MovieListRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// MovieListRequestValidationError is the validation error returned by
// MovieListRequest.Validate if the designated constraints aren't met.
type MovieListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MovieListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MovieListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MovieListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MovieListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MovieListRequestValidationError) ErrorName() string { return "MovieListRequestValidationError" }

// Error satisfies the builtin error interface
func (e MovieListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMovieListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MovieListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MovieListRequestValidationError{}
